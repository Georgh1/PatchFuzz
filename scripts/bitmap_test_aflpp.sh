#!/usr/bin/python3
import sys
import struct
if len(sys.argv) != 4:
  print("./bitmap_test.sh TARGET_PATH prev_loc cur_loc")
  exit(0)
# Open the binary file in read mode
MAP_SIZE = 65536

def AFL_rotl64(x, r):
    # Rotate left 64-bit value
    return ((x << r) | (x >> (64 - r))) & 0xFFFFFFFFFFFFFFFF

def AFL_readLE64(memPtr):
    # Read a little-endian 64-bit value from a byte sequence
    return struct.unpack('<Q', memPtr[:8])[0]

def AFL_rrmxmx(h64, length):
    # This mix is inspired by Pelle Evensen's rrmxmx
    h64 ^= (AFL_rotl64(h64, 49) ^ AFL_rotl64(h64, 24))
    h64 *= 0x9FB21C651E98DF25
    h64 = h64 & 0xFFFFFFFFFFFFFFFF
    h64 ^= ((h64 >> 35) + length)
    h64 *= 0x9FB21C651E98DF25
    h64 = h64 & 0xFFFFFFFFFFFFFFFF
    return h64 ^ (h64 >> 28)

def afl_hash_ip(ip):
    # Secret used for the hash (provided as a byte sequence)
    secret = bytes([
        0xb8, 0xfe, 0x6c, 0x39, 0x23, 0xa4, 0x4b, 0xbe, 0x7c, 0x01, 0x81, 0x2c,
        0xf7, 0x21, 0xad, 0x1c, 0xde, 0xd4, 0x6d, 0xe9, 0x83, 0x90, 0x97, 0xdb,
        0x72, 0x40, 0xa4, 0xa4, 0xb7, 0xb3, 0x67, 0x1f, 0xcb, 0x79, 0xe6, 0x4e,
        0xcc, 0xc0, 0xe5, 0x78, 0x82, 0x5a, 0xd0, 0x7d, 0xcc, 0xff, 0x72, 0x21,
        0xb8, 0x08, 0x46, 0x74, 0xf7, 0x43, 0x24, 0x8e, 0xe0, 0x35, 0x90, 0xe6,
        0x81, 0x3a, 0x26, 0x4c, 0x3c, 0x28, 0x52, 0xbb, 0x91, 0xc3, 0x00, 0xcb,
        0x88, 0xd0, 0x65, 0x8b, 0x1b, 0x53, 0x2e, 0xa3, 0x71, 0x64, 0x48, 0x97,
        0xa2, 0x0d, 0xf9, 0x4e, 0x38, 0x19, 0xef, 0x46, 0xa9, 0xde, 0xac, 0xd8,
        0xa8, 0xfa, 0x76, 0x3f, 0xe3, 0x9c, 0x34, 0x3f, 0xf9, 0xdc, 0xbb, 0xc7,
        0xc7, 0x0b, 0x4f, 0x1d, 0x8a, 0x51, 0xe0, 0x4b, 0xcd, 0xb4, 0x59, 0x31,
        0xc8, 0x9f, 0x7e, 0xc9, 0xd9, 0x78, 0x73, 0x64, 0xea, 0xc5, 0xac, 0x83,
        0x34, 0xd3, 0xeb, 0xc3, 0xc5, 0x81, 0xa0, 0xff, 0xfa, 0x13, 0x63, 0xeb,
        0x17, 0x0d, 0xdd, 0x51, 0xb7, 0xf0, 0xda, 0x49, 0xd3, 0x16, 0x55, 0x26,
        0x29, 0xd4, 0x68, 0x9e, 0x2b, 0x16, 0xbe, 0x58, 0x7d, 0x47, 0xa1, 0xfc,
        0x8f, 0xf8, 0xb8, 0xd1, 0x7a, 0xd0, 0x31, 0xce, 0x45, 0xcb, 0x3a, 0x8f,
        0x95, 0x16, 0x04, 0x28, 0xaf, 0xd7, 0xfb, 0xca, 0xbb, 0x4b, 0x40, 0x7e
    ])

    # Extract lower 32 bits and higher 32 bits of the IP
    input1 = int(ip & 0xFFFFFFFF)

    input2 = int(ip >> 32)
    # Create bitflip using the secret
    bitflip = AFL_readLE64(secret[8:16]) ^ AFL_readLE64(secret[16:24])

    # Combine input parts to form a 64-bit value
    input64 = (input1 << 32) + input2

    # XOR with the bitflip value
    keyed = input64 ^ bitflip


    # Return the final hash using AFL_rrmxmx
    return AFL_rrmxmx(keyed, 8)


with open(sys.argv[1]+'/'+'fuzz_bitmap', 'rb') as file:
    # Read the entire content of the file
    file_content = file.read()# Convert the binary content to a list
    byte_list =list(file_content)
    cur_loc = int(sys.argv[2],16)
    afl_prev_loc = (afl_hash_ip(cur_loc) & (MAP_SIZE - 1)) >> 1
    cur_loc = int(sys.argv[3],16)
    cur_loc = afl_hash_ip(cur_loc) & (MAP_SIZE - 1)
    afl_idx = cur_loc ^ afl_prev_loc
    afl_idx &= MAP_SIZE - 1
    print(byte_list[afl_idx])
    if int(byte_list[afl_idx]) == 0xff:
       print('untouched')
    else:
       print('touched')
